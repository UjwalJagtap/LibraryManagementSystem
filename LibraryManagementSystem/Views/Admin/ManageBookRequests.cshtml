@model IEnumerable<LibraryManagementSystem.Models.BookRequest>

<div class="container mt-4">
    <h3>Manage Book Requests</h3>

    <!-- Filter Dropdown -->
    <div class="d-flex justify-content-between mb-3">
        <label for="filterStatus" class="fw-bold">Filter by Status:</label>
        <select id="filterStatus" class="form-select w-auto" onchange="filterRequests()">
            <option value="All">All</option>
            <option value="Pending">Pending</option>
            <option value="Approved">Approved</option>
            <option value="Rejected">Rejected</option>
        </select>
    </div>

    <div class="input-group w-50 d-flex justify-content-between mb-3">
        <input type="text" id="searchQuery" class="form-control" placeholder="Search by Book Title or Student Name">
        <button class="btn btn-primary" onclick="searchBookRequests()">Search</button>
        <button class="btn btn-secondary ms-2" onclick="loadAllBookRequests()">Show All</button>
    </div>
    <!-- Requests Table -->
    <div class="table-wrapper">
        <table class="table table-bordered mt-3">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Student Name</th>
                    <th>Request Type</th> <!-- New Column -->
                    <th>Request Date</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="bookRequestsTableBody">
                @if (Model.Any())
                {
                    @foreach (var request in Model)
                    {
                        <tr>
                            <td>@(request.Book?.Title ?? "<span class='text-danger'>Book not found</span>")</td>
                            <td>@(request.User?.FullName ?? "<span class='text-danger'>Student not found</span>")</td>
                            <td>@request.RequestType</td> <!-- Display the request type -->
                            <td>@request.RequestDate.ToString("dd MMM yyyy")</td>
                            <td>
                                @switch (request.Status)
                                {
                                    case "Approved":
                                        <span class="badge bg-success">Approved</span>
                                        break;
                                    case "Rejected":
                                        <span class="badge bg-danger">Rejected</span>
                                        break;
                                    case "Returned":
                                        <span class="badge bg-secondary">Returned</span>
                                        break;
                                    default:
                                        <span class="badge bg-warning">Pending</span>
                                        break;
                                }
                            </td>
                            <td>
                                @if (request.Status == "Pending")
                                {
                                    <button class="btn btn-success btn-sm" onclick="approveRequest(@request.RequestId)">Approve</button>
                                    <button class="btn btn-danger btn-sm" onclick="rejectRequest(@request.RequestId)">Reject</button>
                                }
                                else
                                {
                                    <span class="text-muted">No Actions Available</span>
                                }
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" class="text-center text-danger">No book requests found.</td>
                    </tr>
                }
            </tbody>

        </table>
    </div>
</div>

<script>
    function searchBookRequests() {
        const query = $("#searchQuery").val().trim();
        if (!query) {
            alert("Please enter a search query.");
            return;
        }

        $.ajax({
            url: `/Admin/SearchBookRequests?searchQuery=${query}`,
            type: "GET",
            success: function (data) {
                const tableBody = $(data).find("#bookRequestsTableBody").html();
                $("#bookRequestsTableBody").html(tableBody.trim() !== "" ? tableBody : "<tr><td colspan='6' class='text-center text-danger'>No matching requests found.</td></tr>");
            },
            error: function (xhr) {
                console.error("Error:", xhr.responseText);
                alert("Error loading search results.");
            }
        });
    }
    function filterRequests() {
        const status = $("#filterStatus").val();

        $.ajax({
            url: `/Admin/FilterBookRequests?status=${status}`,
            type: "GET",
            success: function (data) {
                const tableBody = $(data).find("#bookRequestsTableBody").html();
                $("#bookRequestsTableBody").html(tableBody.trim() !== "" ? tableBody : "<tr><td colspan='6' class='text-center text-danger'>No matching requests found.</td></tr>");
            },
            error: function (xhr) {
                console.error("Error:", xhr.responseText);
                alert("Error loading filtered requests.");
            }
        });
    }

    function approveRequest(requestId) {
        if (!confirm("Are you sure you want to approve this request?")) return;

        $.ajax({
            url: "/Admin/ApproveRequest",
            type: "POST",
            data: { requestId: requestId },
            success: function (response) {
                alert(response.message);
                filterRequests(); // Refresh the view after approval
                updateMetrics(response.metrics);
            },
            error: function (xhr) {
                console.error("Error:", xhr.responseText);
                alert("Error approving request.");
            }
        });
    }

    function rejectRequest(requestId) {
        if (!confirm("Are you sure you want to reject this request?")) return;

        $.ajax({
            url: "/Admin/RejectRequest",
            type: "POST",
            data: { requestId: requestId },
            success: function (response) {
                alert(response.message);
                filterRequests(); // Refresh the view after rejection
            },
            error: function (xhr) {
                console.error("Error:", xhr.responseText);
                alert("Error rejecting request.");
            }
        });

    }
    function updateMetrics(metrics) {
        $("#totalBooks").text(metrics.totalBooks);
        $("#totalStudents").text(metrics.totalStudents);
        $("#totalIssuedBooks").text(metrics.totalIssuedBooks);
        $("#totalOverdueBooks").text(metrics.totalOverdueBooks);
    }
</script>
